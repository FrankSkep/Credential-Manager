package frank.password_manager;

import frank.password_manager.Database.DatabaseConnection;
import frank.password_manager.UI.IniciarSesionPNL;
import frank.password_manager.UI.RegistrarPNL;
import frank.password_manager.Utils.ConfigManager;
import frank.password_manager.Utils.Tools;
import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

public class Password_Manager extends javax.swing.JFrame {

    public Password_Manager() {
        initComponents();

        setLocationRelativeTo(null);

        initializeDbFile();

        if (Tools.primerAcceso()) {
            Tools.changePanel(new RegistrarPNL(), contenidoPNL);
        } else {
            Tools.changePanel(new IniciarSesionPNL(), contenidoPNL);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        contenidoPNL = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout contenidoPNLLayout = new javax.swing.GroupLayout(contenidoPNL);
        contenidoPNL.setLayout(contenidoPNLLayout);
        contenidoPNLLayout.setHorizontalGroup(
            contenidoPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        contenidoPNLLayout.setVerticalGroup(
            contenidoPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout bgLayout = new javax.swing.GroupLayout(bg);
        bg.setLayout(bgLayout);
        bgLayout.setHorizontalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenidoPNL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        bgLayout.setVerticalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenidoPNL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Password_Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Password_Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Password_Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Password_Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Password_Manager().setVisible(true);
            }
        });
    }

    // Método que pide al usuario que seleccione o cree una base de datos
    private String promptUserForDatabase() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Seleccionar o crear base de datos");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        // Filtro para solo mostrar archivos .db
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos de base de datos (.db)", "db");
        fileChooser.setFileFilter(filter);

        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();

            // Asegurarse de que el archivo tenga la extensión .db
            if (!selectedFile.getName().toLowerCase().endsWith(".db")) {
                selectedFile = new File(selectedFile.getAbsolutePath() + ".db");
            }

            if (!selectedFile.exists()) {
                // Si el archivo no existe, preguntar si desea crearlo
                int option = JOptionPane.showConfirmDialog(null, "El archivo no existe. ¿Deseas crearlo?", "Crear Base de Datos", JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    try {
                        if (selectedFile.createNewFile()) {
                            JOptionPane.showMessageDialog(null, "Base de datos creada con éxito.");
                            return selectedFile.getAbsolutePath();
                        }
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Error al crear la base de datos: " + e.getMessage());
                    }
                }
            } else {
                return selectedFile.getAbsolutePath();
            }
        }
        return null;
    }

    // Inicializa la base de datos
    private void initializeDbFile() {
        // Cargar la ruta de la base de datos de la configuración
        String dbPath = ConfigManager.loadDatabasePath();

        if (dbPath == null || dbPath.isEmpty() || !Tools.isDatabaseFileExists(dbPath)) {
            // Si no hay una base de datos guardada o si el archivo no existe, preguntar al usuario
            dbPath = promptUserForDatabase();
        }

        if (dbPath != null) {
            // Guardar la ruta seleccionada para futuros usos
            ConfigManager.saveDatabasePath(dbPath);

            // Inicializar la conexión con la base de datos
            DatabaseConnection.initializeDatabase(dbPath);
        } else {
            JOptionPane.showMessageDialog(null, "No se seleccionó una base de datos. La aplicación se cerrará.");
            System.exit(0);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bg;
    private javax.swing.JPanel contenidoPNL;
    // End of variables declaration//GEN-END:variables
}
