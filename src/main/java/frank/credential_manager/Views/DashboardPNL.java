package frank.credential_manager.Views;

import frank.credential_manager.DAO.PasswordDAO;
import frank.credential_manager.Database.DB_Connection;
import frank.credential_manager.Models.Password;
import frank.credential_manager.Database.DB_Chooser;
import frank.credential_manager.Utils.Tools;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.JTableHeader;

public class DashboardPNL extends javax.swing.JPanel {

    private static DashboardPNL instance;
    private PasswordDAO dao;
    private List<Password> passwordList;

    // Constructor privado para evitar instanciación desde fuera
    private DashboardPNL() {
        initComponents();
        initializeOnce();
        dao = PasswordDAO.getInstance();

        try {
            refreshDashboard();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error. " + e.toString());
        }
    }

    // Método para obtener la única instancia de DashboardPNL
    public static DashboardPNL getInstance() {
        if (instance == null) {
            instance = new DashboardPNL();
        } else {
            // Refrescar el dashboard cada vez que se obtenga la instancia
            try {
                instance.refreshDashboard();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Ocurrió un error al actualizar el dashboard: " + e.getMessage());
            }
        }
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablePasswords = new javax.swing.JTable();
        searchTF = new javax.swing.JTextField();
        comboboxCateg = new javax.swing.JComboBox<>();
        editBTN = new javax.swing.JButton();
        deleteBTN = new javax.swing.JButton();
        addBTN = new javax.swing.JButton();
        comboboxService = new javax.swing.JComboBox<>();
        filtroBTN = new javax.swing.JButton();
        uploadDatabaseBTN = new javax.swing.JButton();
        searchLBL = new javax.swing.JLabel();
        currentDBLBL = new javax.swing.JLabel();

        setBackground(new java.awt.Color(153, 204, 255));

        tablePasswords.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        tablePasswords.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Servicio", "Usuario", "Contraseña", "Categoria"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePasswords.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tablePasswords.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablePasswords);
        if (tablePasswords.getColumnModel().getColumnCount() > 0) {
            tablePasswords.getColumnModel().getColumn(0).setMinWidth(65);
            tablePasswords.getColumnModel().getColumn(0).setPreferredWidth(100);
            tablePasswords.getColumnModel().getColumn(0).setMaxWidth(65);
            tablePasswords.getColumnModel().getColumn(1).setMinWidth(130);
            tablePasswords.getColumnModel().getColumn(1).setMaxWidth(130);
            tablePasswords.getColumnModel().getColumn(4).setMinWidth(130);
            tablePasswords.getColumnModel().getColumn(4).setMaxWidth(130);
        }

        searchTF.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        comboboxCateg.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        comboboxCateg.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));

        editBTN.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        editBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/edit.png"))); // NOI18N
        editBTN.setText("Editar");
        editBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBTNActionPerformed(evt);
            }
        });

        deleteBTN.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        deleteBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/delete.png"))); // NOI18N
        deleteBTN.setText("Eliminar");
        deleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBTNActionPerformed(evt);
            }
        });

        addBTN.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/add.png"))); // NOI18N
        addBTN.setText("Agregar");
        addBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBTNActionPerformed(evt);
            }
        });

        comboboxService.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        comboboxService.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));

        filtroBTN.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        filtroBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/filter.png"))); // NOI18N
        filtroBTN.setText("Filtrar");
        filtroBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtroBTNActionPerformed(evt);
            }
        });

        uploadDatabaseBTN.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        uploadDatabaseBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/upload_file.png"))); // NOI18N
        uploadDatabaseBTN.setText("Subir archivo");
        uploadDatabaseBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadDatabaseBTNActionPerformed(evt);
            }
        });

        searchLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        searchLBL.setText("  ");

        currentDBLBL.setBackground(new java.awt.Color(255, 255, 255));
        currentDBLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        currentDBLBL.setForeground(new java.awt.Color(0, 0, 0));
        currentDBLBL.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        currentDBLBL.setText(" a");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(75, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(addBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(editBTN)
                            .addGap(18, 18, 18)
                            .addComponent(deleteBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(filtroBTN)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(comboboxService, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(comboboxCateg, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(searchLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(searchTF, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(uploadDatabaseBTN)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(currentDBLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 851, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(74, 74, 74))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentDBLBL, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(uploadDatabaseBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchTF, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(editBTN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                        .addComponent(deleteBTN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                        .addComponent(comboboxCateg, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                        .addComponent(comboboxService, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                        .addComponent(filtroBTN, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                    .addComponent(addBTN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Método para aplicar el filtro por servicio y categoria a la tabla
    private void applyFilter(String service, String category) {
        List<Password> filteredPasswords = passwordList.stream()
                .filter(p -> {
                    // Comprobar si la categoría es "Todo" o si coincide con la categoría de la contraseña
                    boolean matchesCategory = category.equalsIgnoreCase("Categoria") || p.getCategory().equalsIgnoreCase(category);

                    // Comprobar si el servicio está vacío (si no quieres que filtre por servicio si está vacío)
                    boolean matchesService = service.equalsIgnoreCase("Servicio") || p.getServiceName().toLowerCase().contains(service.toLowerCase());

                    return matchesCategory && matchesService;
                })
                .collect(Collectors.toList());

        // Actualizar la tabla con las contraseñas filtradas
        try {
            Tools.entablarContrasenias(tablePasswords, filteredPasswords);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error. " + e.toString());
        }
    }

    // Configura la tabla de contraseñas
    private void configureTable() {

        // Ajustar tamaño fuente header
        JTableHeader header = tablePasswords.getTableHeader();
        header.setFont(new Font("Segoe UI", Font.BOLD, 16));

        // Ajustar el alto de las filas para que coincida con el tamaño de la fuente
        tablePasswords.setRowHeight(tablePasswords.getFontMetrics(tablePasswords.getFont()).getHeight() + 10);

        // Ajustar el ancho de las columnas automáticamente
        Tools.adjustColumnWidths(tablePasswords);
    }

    // Método para aplicar el filtro en base al texto ingresado en el buscador
    private void filterTable() {
        String searchTerm = searchTF.getText().toLowerCase();

        List<Password> filteredPasswords = passwordList.stream()
                .filter(p -> p.getServiceName().toLowerCase().contains(searchTerm)
                || p.getUsername().toLowerCase().contains(searchTerm)
                || p.getCategory().toLowerCase().contains(searchTerm))
                .collect(Collectors.toList());

        // Actualizar la tabla con los datos filtrados
        try {
            Tools.entablarContrasenias(tablePasswords, filteredPasswords);
        } catch (Exception e) {
        }
    }

    // Accion boton agregar
    private void addBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBTNActionPerformed
        Tools.changePanel(new AgregarPassPNL(), (JPanel) this.getParent());
    }//GEN-LAST:event_addBTNActionPerformed

    // Accion boton filtrar
    private void filtroBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtroBTNActionPerformed
        String service = comboboxService.getSelectedItem().toString();
        String category = comboboxCateg.getSelectedItem().toString();
        applyFilter(service, category);
    }//GEN-LAST:event_filtroBTNActionPerformed

    // Accion boton editar
    private void editBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBTNActionPerformed
        int selectedRow = tablePasswords.getSelectedRow();

        if (selectedRow != -1) {
            Long id = Long.valueOf(tablePasswords.getValueAt(selectedRow, 0).toString());
            String serviceName = tablePasswords.getValueAt(selectedRow, 1).toString();
            String username = tablePasswords.getValueAt(selectedRow, 2).toString();
            String password = tablePasswords.getValueAt(selectedRow, 3).toString();
            String category = tablePasswords.getValueAt(selectedRow, 4).toString();
            Tools.changePanel(new EditPassPNL(new Password(id, serviceName, username, password, category)), (JPanel) this.getParent());
        } else {
            JOptionPane.showInternalMessageDialog(null, "No se selecciono ningun elemento", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_editBTNActionPerformed

    // Accion boton eliminar
    private void deleteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBTNActionPerformed
        int selectedRow = tablePasswords.getSelectedRow();

        if (selectedRow != -1) {
            Long id = Long.valueOf(tablePasswords.getValueAt(selectedRow, 0).toString());
            int res = JOptionPane.showConfirmDialog(null, "¿Seguro que desea eliminar la contraseña con id " + id + " ?", "Confirmacion", JOptionPane.YES_NO_OPTION);

            if (res == JOptionPane.YES_OPTION) {
                if (dao.deletePassword(id)) {
                    JOptionPane.showInternalMessageDialog(null, "Contraseña eliminada exitosamente", "Informacion", JOptionPane.INFORMATION_MESSAGE);
                    try {
                        Tools.entablarContrasenias(tablePasswords, dao.getAllPasswords());
                    } catch (Exception e) {
                        System.out.println("Error " + e.getMessage());
                    }
                }
            }
        } else {
            JOptionPane.showInternalMessageDialog(null, "No se selecciono ningun elemento", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_deleteBTNActionPerformed

    // Cambia base de datos (Requiere autenticacion)
    private void uploadDatabaseBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadDatabaseBTNActionPerformed
        DB_Chooser.changeDatabase();
    }//GEN-LAST:event_uploadDatabaseBTNActionPerformed

    // Refresca la pantalla principal
    private void refreshDashboard() throws Exception {

        currentDBLBL.setText("Actual: " + Tools.getFileName(DB_Connection.getDatabasePath()));

        passwordList = dao.getAllPasswords();

        Tools.entablarContrasenias(tablePasswords, passwordList);

        List<String> categories = new ArrayList<>();
        categories.add("Categoria");
        categories.addAll(dao.getAllCategories());

        List<String> services = new ArrayList<>();
        services.add("Servicio");
        services.addAll(dao.getAllServices());

        Tools.loadIntoCombobox(comboboxCateg, categories);
        Tools.loadIntoCombobox(comboboxService, services);
    }

    // Inicializa la tabla y evento del buscador
    private void initializeOnce() {
        Tools.setImageLabel(searchLBL, "src/main/resources/Icons/search.png");
        configureTable();

        searchTF.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                filterTable();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                filterTable();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                filterTable();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBTN;
    private javax.swing.JComboBox<String> comboboxCateg;
    private javax.swing.JComboBox<String> comboboxService;
    private javax.swing.JLabel currentDBLBL;
    private javax.swing.JButton deleteBTN;
    private javax.swing.JButton editBTN;
    private javax.swing.JButton filtroBTN;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel searchLBL;
    private javax.swing.JTextField searchTF;
    private javax.swing.JTable tablePasswords;
    private javax.swing.JButton uploadDatabaseBTN;
    // End of variables declaration//GEN-END:variables
}
