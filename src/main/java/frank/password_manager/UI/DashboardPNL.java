package frank.password_manager.UI;

import frank.password_manager.DAO.PasswordDAO;
import frank.password_manager.Database.DatabaseConnection;
import frank.password_manager.Models.Password;
import frank.password_manager.Utils.Tools;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

public class DashboardPNL extends javax.swing.JPanel {

    private PasswordDAO dao;
    private List<Password> passwordList;

    public DashboardPNL() {
        initComponents();

        dao = PasswordDAO.getInstance();

        try {
            passwordList = dao.getAllPasswords();
            initializeDashboard();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error. " + e.toString());
        }

        searchTF.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                filterTable();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                filterTable();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                filterTable();
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablePasswords = new javax.swing.JTable();
        searchTF = new javax.swing.JTextField();
        comboboxCateg = new javax.swing.JComboBox<>();
        editBTN = new javax.swing.JButton();
        deleteBTN = new javax.swing.JButton();
        addBTN = new javax.swing.JButton();
        comboboxService = new javax.swing.JComboBox<>();
        filtroBTN = new javax.swing.JButton();
        importBTN = new javax.swing.JButton();
        exportBTN = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        tablePasswords.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Servicio", "Usuario", "ContraseÃ±a", "Categoria"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePasswords.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tablePasswords.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablePasswords);
        if (tablePasswords.getColumnModel().getColumnCount() > 0) {
            tablePasswords.getColumnModel().getColumn(0).setPreferredWidth(100);
        }

        searchTF.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        searchTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTFActionPerformed(evt);
            }
        });

        comboboxCateg.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        comboboxCateg.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        comboboxCateg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboboxCategActionPerformed(evt);
            }
        });

        editBTN.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        editBTN.setText("Editar");
        editBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBTNActionPerformed(evt);
            }
        });

        deleteBTN.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        deleteBTN.setText("Eliminar");
        deleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBTNActionPerformed(evt);
            }
        });

        addBTN.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addBTN.setText("Agregar nueva");
        addBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBTNActionPerformed(evt);
            }
        });

        comboboxService.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        comboboxService.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));

        filtroBTN.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        filtroBTN.setText("Filtrar");
        filtroBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtroBTNActionPerformed(evt);
            }
        });

        importBTN.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        importBTN.setText("Importar");
        importBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importBTNActionPerformed(evt);
            }
        });

        exportBTN.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        exportBTN.setText("Exportar");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Buscar:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Servicio");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Categoria");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchTF, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(152, 152, 152)
                        .addComponent(importBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(exportBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(addBTN)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(editBTN)
                        .addGap(18, 18, 18)
                        .addComponent(deleteBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(filtroBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboboxService, 0, 89, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboboxCateg, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel3)))))
                .addGap(89, 89, 89))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBTN)
                    .addComponent(importBTN)
                    .addComponent(exportBTN)
                    .addComponent(searchTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editBTN)
                    .addComponent(deleteBTN)
                    .addComponent(comboboxCateg, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboboxService, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filtroBTN))
                .addContainerGap(28, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboboxCategActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxCategActionPerformed


    }//GEN-LAST:event_comboboxCategActionPerformed

    // MÃ©todo para aplicar el filtro
    private void applyFilter(String service, String category) {
        List<Password> filteredPasswords = passwordList.stream()
                .filter(p -> {
                    // Comprobar si la categorÃ­a es "Todo" o si coincide con la categorÃ­a de la contraseÃ±a
                    boolean matchesCategory = category.equalsIgnoreCase("Todo") || p.getCategory().equalsIgnoreCase(category);

                    // Comprobar si el servicio estÃ¡ vacÃ­o (si no quieres que filtre por servicio si estÃ¡ vacÃ­o)
                    boolean matchesService = service.equalsIgnoreCase("Todo") || p.getServiceName().toLowerCase().contains(service.toLowerCase());

                    return matchesCategory && matchesService;
                })
                .collect(Collectors.toList());

        // Actualizar la tabla con las contraseÃ±as filtradas
        try {
            Tools.entablarContrasenias(tablePasswords, filteredPasswords);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error. " + e.toString());
        }
    }

    // MÃ©todo para aplicar el filtro en base al texto ingresado
    private void filterTable() {
        String searchTerm = searchTF.getText().toLowerCase();

        List<Password> filteredPasswords = passwordList.stream()
                .filter(p -> p.getServiceName().toLowerCase().contains(searchTerm)
                || p.getUsername().toLowerCase().contains(searchTerm)
                || p.getCategory().toLowerCase().contains(searchTerm))
                .collect(Collectors.toList());

        // Actualizar la tabla con los datos filtrados
        try {
            Tools.entablarContrasenias(tablePasswords, filteredPasswords);
        } catch (Exception e) {
        }
    }

    private void addBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBTNActionPerformed
        Tools.changePanel(new AgregarPassPNL(), (JPanel) this.getParent());
    }//GEN-LAST:event_addBTNActionPerformed

    private void filtroBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtroBTNActionPerformed
        String service = comboboxService.getSelectedItem().toString();
        String category = comboboxCateg.getSelectedItem().toString();
        applyFilter(service, category);
    }//GEN-LAST:event_filtroBTNActionPerformed

    private void editBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBTNActionPerformed
        int selectedRow = tablePasswords.getSelectedRow();

        if (selectedRow != -1) {
            Long id = Long.valueOf(tablePasswords.getValueAt(selectedRow, 0).toString());
            String serviceName = tablePasswords.getValueAt(selectedRow, 1).toString();
            String username = tablePasswords.getValueAt(selectedRow, 2).toString();
            String password = tablePasswords.getValueAt(selectedRow, 3).toString();
            String category = tablePasswords.getValueAt(selectedRow, 4).toString();
            Tools.changePanel(new EditPassPNL(new Password(id, serviceName, username, password, category)), (JPanel) this.getParent());
        } else {
            JOptionPane.showInternalMessageDialog(null, "No se selecciono ningun elemento", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_editBTNActionPerformed

    private void deleteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBTNActionPerformed
        int selectedRow = tablePasswords.getSelectedRow();

        if (selectedRow != -1) {
            Long id = Long.valueOf(tablePasswords.getValueAt(selectedRow, 0).toString());
            int res = JOptionPane.showConfirmDialog(null, "Â¿Seguro que desea eliminar la contraseÃ±a con id " + id + " ?");
            if (res == JOptionPane.YES_OPTION) {
                if (dao.deletePassword(id)) {
                    JOptionPane.showInternalMessageDialog(null, "ContraseÃ±a eliminada exitosamente", "Informacion", JOptionPane.INFORMATION_MESSAGE);
                    try {
                        Tools.entablarContrasenias(tablePasswords, dao.getAllPasswords());
                    } catch (Exception e) {
                        System.out.println("Error " + e.getMessage());
                    }
                }
            }
        } else {
            JOptionPane.showInternalMessageDialog(null, "No se selecciono ningun elemento", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_deleteBTNActionPerformed

    private void importBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importBTNActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(this);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            File tempFile = new File("src/main/resources/temp_passwords.db"); // Archivo temporal

            try {
                // Cerrar conexiones a la base de datos
                DatabaseConnection.close();

                // Copiar el archivo seleccionado a un archivo temporal
                Files.copy(selectedFile.toPath(), tempFile.toPath(), StandardCopyOption.REPLACE_EXISTING);

                // Reemplazar el archivo original con el temporal
                Files.move(tempFile.toPath(), new File("src/main/resources/passwords.db").toPath(), StandardCopyOption.REPLACE_EXISTING);

                // Reiniciar la conexiÃ³n a la base de datos
                DatabaseConnection.initializeDatabase();

                try {
                    initializeDashboard();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Error : " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }

                JOptionPane.showMessageDialog(this, "Base de datos importada con Ã©xito.", "Ãxito", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al importar la base de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } finally {
                // Eliminar el archivo temporal si existe
                if (tempFile.exists()) {
                    tempFile.delete();
                }
            }
        }
    }//GEN-LAST:event_importBTNActionPerformed

    private void searchTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTFActionPerformed

    private void initializeDashboard() throws Exception {
        Tools.entablarContrasenias(tablePasswords, passwordList);

        List<String> categories = new ArrayList<>();
        categories.add("Todo");
        categories.addAll(dao.getAllCategories());

        List<String> services = new ArrayList<>();
        services.add("Todo");
        services.addAll(dao.getAllServices());

        Tools.loadIntoCombobox(comboboxCateg, categories);
        Tools.loadIntoCombobox(comboboxService, services);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBTN;
    private javax.swing.JComboBox<String> comboboxCateg;
    private javax.swing.JComboBox<String> comboboxService;
    private javax.swing.JButton deleteBTN;
    private javax.swing.JButton editBTN;
    private javax.swing.JButton exportBTN;
    private javax.swing.JButton filtroBTN;
    private javax.swing.JButton importBTN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchTF;
    private javax.swing.JTable tablePasswords;
    // End of variables declaration//GEN-END:variables
}
